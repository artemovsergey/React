version: '2.2'

networks:
  asp-dotnet-network:
    driver: bridge

services:

  # letsencrypt:
  #   image: jrcs/letsencrypt-nginx-proxy-companion
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./letsencrypt:/etc/letsencrypt
  #     - ./webroot:/var/www/certbot
  #     - ./certs:/etc/nginx/certs
  #     - ./html:/usr/share/nginx/html
  #     - ./acme:/etc/acme.sh  
  #   environment:
  #     - NGINX_PROXY_CONTAINER=nginx
  #     - NGINX_DOCKER_GEN_CONTAINER=nginx
  #   depends_on:
  #     - nginx 

  # certbot:
  #   image: certbot/certbot
  #   volumes:
  #     - ./letsencrypt:/etc/letsencrypt
  #     - ./webroot:/var/www/certbot
  #   command: certonly --register-unsafely-without-email --webroot -w /var/www/certbot -d example.com -d www.example.com --agree-tos --no-eff-email --force-renewal
  #   environment:
  #     - WEBROOT=/var/www/certbot
  #   depends_on:
  #     - nginx

  nginx:
    container_name: ContainerNginx
    build: 
      context: .
      dockerfile: loadbalancer/Dockerfile
    restart: always
    ports:
      - "80:80"
      - "443:443"
    links:
      - api
      - angular
    depends_on:
      - db
      - api
      - angular
    networks:
      - asp-dotnet-network 

  angular:
    container_name: ContainerAngular
    restart: always
    build:
      context: .
      dockerfile: Example.Angular/Dockerfile

    develop:
      watch:
        - action: sync
          path: ./Example.Angular/src
          target: /app/src
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json

    environment:
      - Production
    ports:
      - "4200:4200"
    networks:
      - asp-dotnet-network
    depends_on:
      - db
      - api
  api:
    container_name: ContainerAPI
    restart: always
    build:
      context: .
      dockerfile: Example.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "5010:5001"
    networks:
      - asp-dotnet-network
    depends_on:
      - db
  db:
    image: postgres:latest
    container_name: ContainerPostgreSQL
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: Example
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - asp-dotnet-network
  pgadmin:
    container_name: ContainerPgAdmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    volumes:
      - postgres_data:/var/lib/postgresql/dbadmin
    ports:
      - "5050:80"
    networks:
      - asp-dotnet-network 

volumes:
    postgres_data:
